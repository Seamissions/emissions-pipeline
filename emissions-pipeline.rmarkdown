---
title: "Emissions Pipeline"
date: last-modified
format:
  html:
      toc: true
      code-fold: true
editor: visual
execute:
  warning: false
  messages: false
editor_options: 
  chunk_output_type: console
---


# About

This repository hosts the code to create the open source data processing pipeline.

## Load packages


```{r}
#| code-summary: Expand code
library(tidyverse)
library(janitor)
library(here)
library(gghighlight)
library(lubridate)
#library(reprex)
library(ggwordcloud)
```


## Load data


```{r}
#| code-summary: Expand code

# Turn off scientific notation
options(scipen=999)

# Set file path to data folder
pathway <- "/capstone/seamissions/data/meds_capstone_project"

# Set up import for .csv or .xlsx files
file_names <- list.files(here(pathway), pattern=paste0(c("*.xlsx","*.csv"), collapse="|"), full.names=TRUE)

# Read in data files
for (i in seq_along(file_names)) {
  # If .csv, read_csv
  if(grepl('.*\\.csv', file_names[i])) {
        table <- read_csv(file_names[i], show_col_types = FALSE) %>%
          clean_names()
         } else {
           # If .xslx, read_excel
           table <- read_excel(file_names[i]) %>%
             clean_names()
         }
  
  # Rename files truncated names
  if(str_detect(file_names[i], "non")) {
    table_name <- substr(file_names[i], 64, 79)
  } else {
    table_name <- substr(file_names[i], 64, 76)
  }
  assign(table_name, table)
}
```


# Merge Emissions Datasets

## Clean Data


```{r}
#| code-summary: Expand code

# Create `year_month` column
broadcasting <- ais_emissions %>%
  mutate(date = lubridate::ymd(month)) %>%
  mutate(year_month = format(date, '%Y-%m'))
  
# Create `year_month` column
non_broadcasting <- non_broadcasting %>%
  mutate(date = lubridate::ymd(month)) %>%
  mutate(year_month = format(date, '%Y-%m'))
```


## Join Data


```{r}
#| code-summary: Expand code

#  ---- Left join broadcasting and non-broadcasting datasets ----
emissions_joined <- left_join(broadcasting, non_broadcasting, by = c("year_month", "lat_bin", "lon_bin", "length_size_class_percentile")) %>%
  
  # Replace non-broadcasting NA values with 0 (see decision point below)
  mutate(emissions_co2_non_broadcasting_mt = ifelse(is.na(emissions_co2_non_broadcasting_mt), 0, emissions_co2_non_broadcasting_mt),
         emissions_ch4_non_broadcasting_mt = ifelse(is.na(emissions_ch4_non_broadcasting_mt), 0, emissions_ch4_non_broadcasting_mt),
         emissions_n2o_non_broadcasting_mt = ifelse(is.na(emissions_n2o_non_broadcasting_mt), 0, emissions_n2o_non_broadcasting_mt),
         emissions_nox_non_broadcasting_mt = ifelse(is.na(emissions_nox_non_broadcasting_mt), 0, emissions_nox_non_broadcasting_mt),
         emissions_sox_non_broadcasting_mt = ifelse(is.na(emissions_sox_non_broadcasting_mt), 0, emissions_sox_non_broadcasting_mt),
         emissions_pm_non_broadcasting_mt = ifelse(is.na(emissions_pm_non_broadcasting_mt), 0, emissions_pm_non_broadcasting_mt),
         emissions_co_non_broadcasting_mt = ifelse(is.na(emissions_co_non_broadcasting_mt), 0, emissions_co_non_broadcasting_mt)) %>%

  # Select columns to keep
  select(year_month, 
         lon_bin,
         lat_bin,
         flag, 
         vessel_class, 
         length_size_class_percentile, 
         fishing_activity, 
         hours, 
         kw_hours,
         emissions_co2_mt, 
         emissions_ch4_mt, 
         emissions_n2o_mt, 
         emissions_nox_mt, 
         emissions_sox_mt, 
         emissions_pm_mt, 
         emissions_co_mt,
         emissions_co2_non_broadcasting_mt,
         emissions_ch4_non_broadcasting_mt,
         emissions_n2o_non_broadcasting_mt,
         emissions_nox_non_broadcasting_mt,
         emissions_sox_non_broadcasting_mt,
         emissions_pm_non_broadcasting_mt,
         emissions_co_non_broadcasting_mt)
```


**Decision point:** NA values in `emissions_non_broadcasting` are giving NA in the totals after factoring.

- Solution: replaced NA with 0

## Factor Emissions


```{r}
#| code-summary: Expand code
# Factor non-broadcasting emissions
emissions <- emissions_joined %>%
  # Calculate total kw hours per grouped "ship"
  group_by(year_month, lon_bin, lat_bin, flag, vessel_class, length_size_class_percentile, hours, kw_hours) %>% 
  mutate(kw_hours_by_ship = sum(kw_hours, na.rm = TRUE)) %>%
  
  # Calculate total `kw_hours` per pixel and length size class
  group_by(year_month, lon_bin, lat_bin, length_size_class_percentile) %>%
  mutate(total_kw_hours = sum(kw_hours, na.rm = TRUE)) %>%
  ungroup() %>%
  
  # Define a factor for the proportion of hours per flag/total hours 
  mutate(factor = kw_hours_by_ship/total_kw_hours) %>%
  
  # Apply factor to emissions columns to partition nb data
  mutate(total_co2 = emissions_co2_mt + (factor * emissions_co2_non_broadcasting_mt),
         total_ch4 = emissions_ch4_mt + (factor * emissions_ch4_non_broadcasting_mt),
         total_n2o = emissions_n2o_mt + (factor * emissions_n2o_non_broadcasting_mt),
         total_nox = emissions_nox_mt + (factor * emissions_nox_non_broadcasting_mt),
         total_sox = emissions_sox_mt + (factor * emissions_sox_non_broadcasting_mt),
         total_pm = emissions_pm_mt + (factor * emissions_pm_non_broadcasting_mt),
         total_co = emissions_co_mt + (factor * emissions_co_non_broadcasting_mt)) %>%

    # Select columns of interest
   select(year_month, 
         lon_bin,
         lat_bin,
         flag, 
         vessel_class, 
         length_size_class_percentile, 
         fishing_activity, 
         hours, 
         kw_hours,
         total_co2, 
         total_ch4, 
         total_n2o, 
         total_nox, 
         total_sox, 
         total_pm, 
         total_co)

# -------- Check for discrepancies ---------
# Total co2 emissions before factoring
em_before <- sum(broadcasting$emissions_co2_mt, na.rm = TRUE) + sum(non_broadcasting$emissions_co2_non_broadcasting_mt, na.rm = TRUE)

# Total co2 emissions after factoring
em_after <- sum(emissions$total_co2, na.rm = TRUE)

# Difference in co2 emissions
diff <- em_after - em_before

# Percent error for co2
diff/em_before # 0.000004253729% nice
```


## Future decision points:

- group by `hours` *and* `kw_hours`? Can you sum a variable that you are grouping by? (i.e. `kw_hours`).
- is rounding the course of discrepancy? How do we avoid? For building in checks!

## Visualize (maps, time series plots)


```{r}
ggplot(emissions, aes(vessel_class, total_co)) +
  geom_boxplot() +
  coord_flip()

ggplot(emissions, aes(flag, total_co2)) +
  geom_boxplot() +
  coord_flip()

em_pivot <- emissions %>%
  pivot_longer(cols = c(10:16), names_to = "pollutant_type",
               values_to = "total_emissions_mt") %>%
  mutate(pollutant_type = str_remove(pollutant_type, "total_"))

ggplot(em_pivot, aes(pollutant_type, total_emissions_mt)) +
  geom_boxplot() +
  coord_flip()

em_pivot %>%
  group_by(pollutant_type) %>%
  summarise(emissions = sum(total_emissions_mt)) %>%
ggplot(aes(label = pollutant_type, size = emissions)) +
  geom_text_wordcloud() +
  theme_minimal()
```

