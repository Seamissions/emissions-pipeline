---
title: "FAO Regions"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---
# FAO Regions

### Load packages

```{r}
library(tidyverse)
library(janitor)
library(here)
library(gghighlight)
library(lubridate)
library(ggwordcloud)
library(glue)
library(sf)
library(dplyr)
```

### Import and clean data

```{r}
# Turn off scientific notation
options(scipen=999)

# -------- EMISSIONS --------
#filepath <- paste0(project_directory, "/checkpoint/emissions.csv")

# import emissions data
# workbench-2
emissions <- read_csv(file.path("/capstone/seamissions/checkpoint/emissions.csv"), show_col_types = FALSE)

# local
#emissions <- read_csv(file.path("/Users/carmenhoyt/Documents/UCSB/Capstone/Data/checkpoint/emissions.csv"), show_col_types = FALSE)

# set to WGS (degrees) ?
# emissions_sf <- emissions %>%
#   # add lat and lon bin to preserve for merge 
#   dplyr::mutate(lat = lat_bin, lon = lon_bin) %>%
#   st_as_sf(coords = c("lon", "lat"), crs = 4326)  

# equal earth 8857
#my_crs <- st_crs("+proj=eqearth +datum=WGS84 +units=m +no_defs")

# OR mollweide projection 54009 but not recognized
#mollweide_proj <- "+proj=moll +lon_0=0 +datum=WGS84 +units=m +no_defs"
#emissions_sf <- st_set_crs(emissions_sf, mollweide_proj) # transform?

# create grid throughout extent of emissions_sf
# emissions_grid <- emissions_sf %>%
#   st_make_grid(cellsize = c(1,1),
#                what = "polygons") %>%
#   st_sf() %>%
#   st_make_valid()

emissions_filtered <- emissions %>%
  mutate(year = as.integer(substr(year_month, 1, 4))) %>%
  group_by(lat_bin, lon_bin, year, flag) %>%
  summarise(total_co2 = sum(total_co2, na.rm = TRUE))

emissions_sf <- emissions_filtered %>%
  # add lat and lon bin to preserve for merge 
  dplyr::mutate(lat = lat_bin, lon = lon_bin) %>%
  st_as_sf(coords = c("lon", "lat"), crs = 4326) 

# create grid throughout extent of emissions_sf
emissions_grid <- emissions_sf %>%
  st_make_grid(cellsize = c(1,1),
               what = "polygons") %>%
  st_sf() %>%
  st_make_valid()
  
# spatially join emissions data to the grid
emissions_grid_sf <- st_join(emissions_grid, emissions_sf, left = FALSE) %>%
  # transform to Equal Earth
  st_transform(6933)

emissions_grid_sf$area_before <- st_area(emissions_grid_sf)

# -------- FAO REGIONS --------
# import regions data (set same crs)
# workbench-2
fao_regions <- st_read(file.path("/capstone/seamissions/fao_region_shapefile")) %>%
  # transform to Mollweide
  st_transform(st_crs(emissions_grid_sf)) %>%
  st_make_valid()

# local
# fao_regions <- st_read(file.path("/Users/carmenhoyt/Documents/UCSB/Capstone/Data/fao_region_shapefile")) %>%
#   # transform to Mollweide
#   st_transform(st_crs(emissions_grid_sf)) %>%
#   st_make_valid()

# confirm crs match
st_crs(emissions_grid_sf) == st_crs(fao_regions)

# -------- FAO CATCH --------
# import catch data
# workbench-2
fao_catch <- read_csv(file.path("/capstone/seamissions/checkpoint/fao_catch.csv"), show_col_types = FALSE) %>%
  select(area_code,
         period,
         iso3_code,
         official_name_en,
         scientific_name,
         value) %>%
  rename(zone = area_code,
         year = period,
         flag = iso3_code,
         catch = value,
         official_name = official_name_en) %>%
  # filter for >2015
  filter(year >= 2015) %>%
  group_by(year, zone, flag, scientific_name, official_name) %>%
  summarise(total_catch = sum(catch, na.rm = TRUE)) %>%
  mutate(zone = as.integer(zone),
         year = as.integer(year))

# local
#fao_catch <- read_csv(file.path("/Users/carmenhoyt/Documents/UCSB/Capstone/Data/checkpoint/fao_catch.csv"), show_col_types = FALSE)

# -------- CHECKPOINT --------
# save locally
#st_write(emissions_grid_sf, here("checkpoint", "emissions_grid_sf.gpkg"))

# save to server
#st_write(emissions_grid_sf, file.path("/capstone/seamissions/checkpoint/emissions_grid_sf.gpkg"), delete_dsn = TRUE)

#st_write(fao_regions, file.path("/capstone/seamissions/checkpoint/fao_regions/fao_regions.shp"), delete_dsn = TRUE)
```

### Proof of concept for Zone 31:

```{r}
# filter for zone 31
zone_31 <- fao_regions %>%
  filter(zone == 31)

# cut out grid cells that overlap with zone 31
emissions_zone_31 <- st_intersection(emissions_grid_sf, zone_31) #sparse = FALSE)

# add area column
emissions_zone_31$area_after <- st_area(emissions_zone_31)

emissions_zone_31 <- emissions_zone_31 %>%
  mutate(area_prop = as.numeric(area_after/area_before)) %>%
  mutate(co2_prop = total_co2 * area_prop) %>%
  select(-c(total_co2, area_prop, area_before, area_after))

# look at area breakdown to see if makes sense (mostly 1s)
# areas_31 <- emissions_zone_31 %>%
#   group_by(area_prop) %>%
#   summarise(count = n()) %>%
#   arrange(desc(count))

# Find which grid polygons intersect with the large polygon
overlapping_pixels <- st_intersects(emissions_grid_sf, zone_31, sparse = FALSE)

# Select grid polygons that have an intersection (TRUE values)
full_grid_31 <- emissions_grid_sf[overlapping_pixels, ]

# visualize the overlapping grid (st_intersects)
plot(st_geometry(zone_31))
plot(st_geometry(full_grid_31), add = TRUE)

# visualize the cut grid (st_intersection)
plot(st_geometry(zone_31))
plot(st_geometry(emissions_zone_31), add = TRUE)
```

```{r}
# -------- ZONE 31 FAO EMISSIONS --------
emissions_zone_31_no_geo <- emissions_zone_31 %>%
  st_drop_geometry()

fao_catch_cleaned_31 <- fao_catch_cleaned %>%
  filter(zone == 31)

# decision point
joined_31 <- left_join(emissions_zone_31_no_geo, fao_catch_cleaned_31, by = c("year", "flag", "zone"))

joined_31 <- left_join(fao_catch_cleaned_31, emissions_zone_31_no_geo, by = c("year", "flag", "zone"))
```

## Decision points:

- what attributes do we want to filter emissions for? do just flag, year, and pollutants make sense?
- what attributes do we want to filter fao catch data for? just flag, year, and catch?
- how do we want to treat flag mis-match? merge flags?
- how do we want to join catch and emissions? which is the primary dataset and how does that affect "lost" emissions


FAO flags **NOT** in emissions:

-   IOT (British Indian Ocean Territory)
-   CSK (Czechoslovakia)
-   ETH (Ethiopia)
-   GUM (Guam)
-   LSO (Lesotho)
-   MYT (Mayotte)
-   ANT (Netherlands Antilles)
-   NFK (Norfold Island)
-   BLM (Saint Barthelemy)
-   MAF (Saint Martin (french))
-   SRB (Serbia)
-   SCG (Serbia and Montenegro)
-   SXM (Sint Maarten (dutch))
-   SVK (Slovakia)
-   SSD (South Sudan)
-   SJM (Svalbard and Jan Mayen Islands)
-   TLS (Timor-Leste)
-   TKL (Tokelau)
-   UGA (Uganda)
-   SUN (Un. Sov. Soc. Rep.)
-   ESH (Western Sahara)
-   YUG (Yugoslavia SFR)
-   EAZ (United Republic of Tanzania, Zanzibar)

Emissions flags **NOT** in FAO:

-   UNK (unknown)
-   VAT (Holy See)
-   CXR (Christmas Island)
-   CCK (Cocos (Keeling) Islands)

### Zone 41:

```{r}
# -------- 41 --------
# filter for zone 41
zone_41 <- fao_regions %>%
  filter(zone == 41)

# cut out grid cells that overlap with zone 41
emissions_zone_41 <- st_intersection(emissions_grid_sf, zone_41) # sparse = FALSE)

# add area column
emissions_zone_41$area_after <- st_area(emissions_zone_41)

emissions_zone_41 <- emissions_zone_41 %>%
  mutate(area_prop = as.numeric(area_after/area_before)) %>%
  mutate(co2_prop = total_co2 * area_prop) %>%
  select(-c(total_co2, area_prop, area_before, area_after))

# look at area breakdown to see if makes sense (mostly 1s)
# areas_41 <- emissions_zone_41 %>%
#   group_by(area) %>%
#   summarise(count = n()) %>%
#   arrange(desc(count))

# Find which grid polygons intersect with the large polygon
overlapping_pixels <- st_intersects(emissions_grid_sf, zone_41, sparse = FALSE)

# Select grid polygons that have an intersection (TRUE values)
full_grid_41 <- emissions_grid_sf[overlapping_pixels, ]

# visualize the overlapping grid (st_intersects)
plot(st_geometry(zone_41))
plot(st_geometry(full_grid_41), add = TRUE)

# visualize the cut grid (st_intersection)
plot(st_geometry(zone_41))
plot(st_geometry(emissions_zone_41), add = TRUE)
```

```{r}
# cut out grid cells that overlap with zone 31
emissions_zones <- st_intersection(emissions_grid_sf, fao_regions) #sparse = FALSE)

# add area column
emissions_zones$area_after <- st_area(emissions_zones)

emissions_zones <- emissions_zones %>%
  mutate(area_prop = as.numeric(area_after/area_before)) %>%
  mutate(co2_prop = total_co2 * area_prop) %>%
  select(-c(total_co2, area_prop, area_before, area_after))

# look at area breakdown to see if makes sense (mostly 1s)
# areas_31 <- emissions_zone_31 %>%
#   group_by(area_prop) %>%
#   summarise(count = n()) %>%
#   arrange(desc(count))

# Find which grid polygons intersect with the large polygon
#overlapping_pixels <- st_intersects(emissions_grid_sf, fao_zones, sparse = FALSE)

# Select grid polygons that have an intersection (TRUE values)
#full_grid <- emissions_grid_sf[overlapping_pixels, ]
```

