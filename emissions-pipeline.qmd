---
title: "Emissions Pipeline"
date: last-modified
format:
  html:
      toc: true
      code-fold: true
editor: visual
execute:
  warning: false
  messages: false
editor_options: 
  chunk_output_type: console
---

# About

This repository hosts the code to create the open source data processing pipeline.

## Load packages

```{r}
#| code-summary: Expand code
library(tidyverse)
library(janitor)
library(here)
library(gghighlight)
library(lubridate)
```

## Load data

```{r}
#| code-summary: Expand code

# Turn off scientific notation
options(scipen=999)

# Set file path to data folder
pathway <- "/capstone/seamissions/data/meds_capstone_project"

# Set up import for .csv or .xlsx files
file_names <- list.files(here(pathway), pattern=paste0(c("*.xlsx","*.csv"), collapse="|"), full.names=TRUE)

# Read in data files
for (i in seq_along(file_names)) {
  # If .csv, read_csv
  if(grepl('.*\\.csv', file_names[i])) {
        table <- read_csv(file_names[i], show_col_types = FALSE) %>%
          clean_names()
         } else {
           # If .xslx, read_excel
           table <- read_excel(file_names[i]) %>%
             clean_names()
         }
  
  # Rename files truncated names
  if(str_detect(file_names[i], "non")) {
    table_name <- substr(file_names[i], 64, 79)
  } else {
    table_name <- substr(file_names[i], 64, 76)
  }
  assign(table_name, table)
}
```

## Clean data

```{r}
#| code-summary: Clean Data

# Create `year_month` column
broadcasting <- ais_emissions %>%
  mutate(date = lubridate::ymd(month)) %>%
  mutate(year_month = format(date, '%Y-%m'))
  
non_broadcasting <- non_broadcasting %>%
  mutate(date = lubridate::ymd(month)) %>%
  mutate(year_month = format(date, '%Y-%m')) %>%
  mutate(flag = "DARK")

# Rename pollutant columns in non-broadcasting data to match broadcasting data
colnames(non_broadcasting)[str_detect(colnames(non_broadcasting), "non_broadcasting")] <- str_remove(colnames(non_broadcasting)[str_detect(colnames(non_broadcasting), "non_broadcasting")], "_non_broadcasting") 

# Warning if pollutant column names don't match (for join)
if(unique(colnames(non_broadcasting)[str_detect(colnames(non_broadcasting), "emissions")] == colnames(broadcasting)[str_detect(colnames(broadcasting), "emissions")]) != TRUE) {
  warning("Column names don't match.")
}
```

```{r}

class(broadcasting$year_month)

broadcasting_filtered <- broadcasting %>% mutate(year = format(as.Date(paste0(year_month, "-01")), "%Y"))

fishing_gear <- broadcasting_filtered %>%
  group_by(vessel_class, year) %>%
  summarise(total_co2 = sum(emissions_co2_mt, na.rm = TRUE)) %>% 
  dplyr::filter(vessel_class %in% c("fishing","squid_jigger","drifting_longlines","pole_and_line","other_fishing","trollers","fixed_gear","pots_and_traps","set_longlines","set_gillnets","trawlers","dredge_fishing","seiners","purse_seines","tuna_purse_seines","other_purse_seines","other_seines","driftnets"))

unique(fishing_gear$vessel_class)

fishing_gears_plot <- ggplot(fishing_gear, aes(x = year, y = total_co2, color = vessel_class, group = vessel_class)) + 
  geom_line() + 
  labs(title = "CO₂ Emissions by Fishing Gear Type Over Time", 
       x = "Year", 
       y = "Total CO₂ Emissions (mt)", 
       color = "Gear Type") +
  theme_minimal()

fishing_gears_plot
```

```{r}
fishing_gear_filtered <- fishing_gear %>%
  filter(vessel_class != "trawlers")


fishing_gears_plot <- ggplot(fishing_gear_filtered, aes(x = year, y = total_co2, color = vessel_class, group = vessel_class)) + 
  geom_line() + 
  facet_wrap(~ vessel_class) + 
  labs(title = "CO₂ Emissions by Fishing Gear Type Over Time", 
       x = "Year", 
       y = "Total CO₂ Emissions (mt)") +
  theme_minimal()

fishing_gears_plot


```

```{r}
# Set file path to data folder
pathway_2 <- "/capstone/seamissions/checkpoint/full_emissions_fao.csv"

full_emissions <- read.csv(here(pathway_2))

total_co2_2016 <- sum(full_emissions$total_co2_mt[full_emissions$year == 2016])

print(total_co2_2016)

tonnes_per_catch <- sum(full_emissions$total_co2_mt[full_emissions$year == 2016], na.rm = TRUE) / sum(full_emissions$country_total_tons_by_species[full_emissions$year == 2016], na.rm = TRUE)

print(tonnes_per_catch)
```

```{r}
pathway_3 <- "/capstone/seamissions/checkpoint/full_emissions_sau.csv"

full_emissions_sau <- read.csv(here(pathway_3))

total_co2_2016_sau <- sum(full_emissions_sau$total_co2_mt[full_emissions_sau$year == 2016])

print(total_co2_2016_sau)

tonnes_per_catch_sau <- sum(full_emissions_sau$total_co2_mt[full_emissions_sau$year == 2016], na.rm = TRUE) / sum(full_emissions_sau$country_total_tons_by_species[full_emissions_sau$year == 2016], na.rm = TRUE)

print(tonnes_per_catch_sau)

print(sum(full_emissions_sau$country_total_tons_by_species[full_emissions_sau$year == 2019], na.rm = TRUE))

years <- 2016:2019  # Define the range of years
results <- sapply(years, function(y) {
  sum(full_emissions_sau$country_total_tons_by_species[full_emissions_sau$year == y], na.rm = TRUE)
})

print(results)  # Display results for each year
```

```{r}
# 100 year global warming potential 
print(full_emissions %>% 
        group_by(year) %>% 
        summarise(total_co_emissions = sum(total_co2_mt + total_ch4_mt * 29.8 + total_n2o_mt * 273)))

full_emissions <- full_emissions %>% 
  filter(country_total_tons_by_species != 0)
# 20 year global warming potential 
print(full_emissions %>% 
        group_by(year) %>% 
        summarise(total_co_emissions = sum(total_co2_mt + total_ch4_mt * 82.5 + total_n2o_mt * 273),
                  emissions_per_ton = total_co_emissions / sum(country_total_tons_by_species, na.rm = TRUE)))
```

