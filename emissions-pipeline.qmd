---
title: "Emissions Pipeline"
date: last-modified
format:
  html:
      toc: true
      code-fold: true
editor: visual
execute:
  warning: false
  messages: false
editor_options: 
  chunk_output_type: console
---

# About

This repository hosts the code to create the open source data processing pipeline.

## Load packages

```{r}
#| code-summary: Expand code
library(tidyverse)
library(janitor)
library(here)
library(gghighlight)
library(lubridate)
```

## Load data

```{r}
#| code-summary: Expand code
# Set file path to data folder
pathway <- "/capstone/seamissions/data/meds_capstone_project"

# Set up import for .csv or .xlsx files
file_names <- list.files(here(pathway), pattern=paste0(c("*.xlsx","*.csv"), collapse="|"), full.names=TRUE)

# Read in data files
for (i in seq_along(file_names)) {
  if(grepl('.*\\.csv', file_names[i])) {
        table <- read_csv(file_names[i], show_col_types = FALSE)
         } else {
           table <- read_excel(file_names[i])
         }
  
  table <- table %>%
  clean_names()
  
  if(str_detect(file_names[i], "non")) {
    table_name <- substr(file_names[i], 64, 79)
  } else {
    table_name <- substr(file_names[i], 64, 76)
  }
  assign(table_name, table)
}
```

## Clean data

-   Filter for fishing == TRUE Some "passenger" say fishing == TRUE?
-   Add "flag" column to non-broadcasting, "nb-fleet" to keep independent from flag "unknown"

```{r}
#| code-summary: Expand code
# Filter for fishing vessels
#broadcasting <- ais_emissions %>%
  #filter(fishing == TRUE)
broadcasting <- ais_emissions %>%
  mutate(date = lubridate::ymd(time)) %>%
  mutate(year_month = format(date, '%Y-%m'))
  
# Add flag to non-broadcasting fleet
non_broadcasting <- non_broadcasting %>%
  #mutate(flag = "nb-fleet") %>%
  mutate(date = lubridate::ymd(time)) %>%
  mutate(year_month = format(date, '%Y-%m'))
```

```{r}
emissions <- left_join(broadcasting, non_broadcasting, by = c("year_month", "lat_bin", "lon_bin", "length_size_class_percentile")) %>%
  mutate(lat_long = paste0(lat_bin, "_", lon_bin)) %>%
  select(year_month, 
         lat_long, 
         flag, 
         vessel_class, 
         length_size_class_percentile, 
         fishing, 
         hours, 
         emissions_co2_mt, 
         emissions_ch4_mt, 
         emissions_n2o_mt, 
         emissions_nox_mt, 
         emissions_sox_mt, 
         emissions_pm_mt, 
         emissions_co_mt,
         emissions_co2_non_broadcasting_mt,
         emissions_ch4_non_broadcasting_mt,
         emissions_n2o_non_broadcasting_mt,
         emissions_nox_non_broadcasting_mt,
         emissions_sox_non_broadcasting_mt,
         emissions_pm_non_broadcasting_mt,
         emissions_co_non_broadcasting_mt)


key <- emissions %>%
  filter(year_month == "2015-01") %>% # a manageable subset
  group_by(year_month, lat_long, flag, vessel_class, length_size_class_percentile, fishing) %>%
  summarise(total_hours_by_flag = sum(hours),
            emissions_co2_ais = sum(emissions_co2_mt),
            emissions_co2_non = sum(emissions_co2_non_broadcasting_mt)) %>% # add other polutants
  ungroup() %>%
  group_by(year_month, lat_long) %>%
  mutate(total_hours = sum(total_hours_by_flag)) %>%
  ungroup() %>%
  mutate(factor = total_hours_by_flag/total_hours) %>%
  mutate(co2 = emissions_co2_ais + factor*emissions_co2_non)

# key <- test %>%
#   group_by(year_month, lat_long) %>%
#   mutate(total_hours = sum(total_hours_by_flag)) %>%
#   ungroup()

test_factor <- left_join(key, emissions, by = c("year_month", "lat_long"))

# total_hour_key <- emissions %>%
#   filter(year_month == "2015-01") %>%
#   mutate(lat_long = paste0(lat_bin, "_", lon_bin)) %>%
#   group_by(year_month, lat_long) %>%
#   mutate(total_hours = sum(hours)) %>%
#   select(year_month, lat_long, total_hours) %>%
#   ungroup()
# 
# test_factor <- left_join(test, total_hour_key, by = c("year_month", "lat_long"))

#test_factor <- test_factor[!duplicate(test_factor)]
```

## Join data

-   Left join could eliminate non-broadcasting vessels that don't overlap with known pixels, would add to existing rows and we wanted new rows.
-   Used bind_rows instead.
-   We need to standardize column names first.

```{r}
#| code-summary: Expand code
# Rename columns in non_broadcasting to match broadcasting
non_broadcasting <- non_broadcasting %>%
  rename(emissions_co2_mt = emissions_co2_non_broadcasting_mt,
         emissions_ch4_mt = emissions_ch4_non_broadcasting_mt,
         emissions_n2o_mt = emissions_n2o_non_broadcasting_mt,
         emissions_nox_mt = emissions_nox_non_broadcasting_mt,
         emissions_sox_mt = emissions_sox_non_broadcasting_mt,
         emissions_pm_mt = emissions_pm_non_broadcasting_mt,
         emissions_co_mt = emissions_co_non_broadcasting_mt)

# Combine datasets
emissions <- bind_rows(ais_emissions, non_broadcasting) %>%
  # Remove unwanted columns
  select(!c("fishing", "hours")) %>%
  # Create lat_long column
  mutate(lat_long = paste0(lat_bin, "_", lon_bin)) %>%
  # Create year_month column
  mutate(date = lubridate::ymd(time)) %>%
  mutate(year_month = format(date, '%Y-%m'))

# Group dataset by pixel
emissions_by_pixel <- emissions %>%
  group_by(lat_long, year_month, flag, vessel_class) %>% 
  summarize(number_vessels = n(),
            co2 = sum(emissions_co2_mt))

# Look at one pixel as an example
pixel_example <- emissions_by_pixel %>%
  filter(lat_long == "-10_-140") 
```

## Decision points:

For a given month, distribute dark fleet data by proximity to known flags (within pixel). - If only dark fleet in a pixel, how do we distribute emissions? Next closest month or next closest pixel? - add +/-1 to lat_long?

Visualize (maps, time series plots)
