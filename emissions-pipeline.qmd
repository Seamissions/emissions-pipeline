---
title: "Emissions Pipeline"
date: last-modified
format:
  html:
      toc: true
      code-fold: true
editor: visual
execute:
  warning: false
  messages: false
editor_options: 
  chunk_output_type: console
---

# About

This repository hosts the code for merging the emissions datasets.

## Load packages

```{r}
#| code-summary: Expand code
library(tidyverse)
library(janitor)
library(here)
library(gghighlight)
library(lubridate)
library(ggwordcloud)
library(glue)
library(sf)
library(dplyr)
```

## Load data

```{r}
#| code-summary: Load Project Data

# ---- Load project data ----

data_directory_base <-  ifelse(Sys.info()["nodename"] == "quebracho" | Sys.info()["nodename"] == "sequoia",
                               "/home/emlab",
                               # Otherwise, set the directory for local machines based on the OS
                               # If using Mac OS, the directory will be automatically set as follows
                               ifelse(Sys.info()["sysname"]=="Darwin",
                                      "/Users/Shared/nextcloud/emLab",
                                      # If using Windows, the directory will be automatically set as follows
                                      ifelse(Sys.info()["sysname"]=="Windows",
                                             "G:/Shared\ drives/nextcloud/emLab",
                                             # If using Linux, will need to manually modify the following directory path based on their user name
                                             # Replace your_username with your local machine user name
                                             "/home/choyt/Nextcloud")))

project_directory <- paste0(data_directory_base, "/projects/current-projects/ocean-ghg-fisheries/data/processed/gfw-emissions/")


```

```{r}
#| code-summary: Expand code

# Turn off scientific notation
options(scipen=999)

# Set file path to data folder
data_pathway <- "/home/emlab/projects/current-projects/ocean-ghg-fisheries/data"
pathway <- "/home/emlab/projects/current-projects/ocean-ghg-fisheries/data/processed/gfw_emissions/"
#pathway <- "/capstone/seamissions/data/meds_capstone_project"

# Set up import for .csv or .xlsx files
file_names <- list.files(pathway, pattern="*.csv", full.names=TRUE)

# Read in emissions data files
for (i in seq_along(file_names)) {
 if(str_detect(file_names[i], "non")) {
    table_name <- paste("non_broadcasting")
    assign(table_name, read_csv(file_names[i], show_col_types = FALSE) %>%
          clean_names())

  } else if (str_detect(file_names[i], "ais")) {
    table_name <- paste("broadcasting")
    assign(table_name, read_csv(file_names[i], show_col_types = FALSE) %>%
          clean_names())
    
  } else {
    warning("Extra file detected.")
  }
}
```

# Merge Emissions Datasets

## Clean Data

```{r}
#| code-summary: Clean Data

# ---- Merge emissions datasets ----

# Create `year_month` column
broadcasting <- broadcasting %>%

  mutate(date = lubridate::ymd(month)) %>%
  mutate(year_month = format(date, '%Y-%m'))
  
# Create `year_month` column in nonbroadcasting dataset
non_broadcasting <- non_broadcasting %>%
  mutate(date = lubridate::ymd(month)) %>%
  mutate(year_month = format(date, '%Y-%m'))
```

## Join Data

```{r}
#| code-summary: Join Broadcasting and Non-Broadcasting Datasets

#  ---- Left join broadcasting and non-broadcasting datasets ----
emissions_joined <- left_join(broadcasting, non_broadcasting, by = c("year_month", "lat_bin", "lon_bin", "length_size_class_percentile")) %>%
  
  # Replace non-broadcasting NA values with 0 (see decision point below)
  mutate(emissions_co2_non_broadcasting_mt = ifelse(is.na(emissions_co2_non_broadcasting_mt), 0, emissions_co2_non_broadcasting_mt),
         emissions_ch4_non_broadcasting_mt = ifelse(is.na(emissions_ch4_non_broadcasting_mt), 0, emissions_ch4_non_broadcasting_mt),
         emissions_n2o_non_broadcasting_mt = ifelse(is.na(emissions_n2o_non_broadcasting_mt), 0, emissions_n2o_non_broadcasting_mt),
         emissions_nox_non_broadcasting_mt = ifelse(is.na(emissions_nox_non_broadcasting_mt), 0, emissions_nox_non_broadcasting_mt),
         emissions_sox_non_broadcasting_mt = ifelse(is.na(emissions_sox_non_broadcasting_mt), 0, emissions_sox_non_broadcasting_mt),
         emissions_pm_non_broadcasting_mt = ifelse(is.na(emissions_pm_non_broadcasting_mt), 0, emissions_pm_non_broadcasting_mt),
         emissions_co_non_broadcasting_mt = ifelse(is.na(emissions_co_non_broadcasting_mt), 0, emissions_co_non_broadcasting_mt),
         emissions_vocs_non_broadcasting_mt = ifelse(is.na(emissions_vocs_non_broadcasting_mt), 0, emissions_co_non_broadcasting_mt),
         emissions_pm2_5_non_broadcasting_mt = ifelse(is.na(emissions_pm2_5_non_broadcasting_mt), 0, emissions_co_non_broadcasting_mt),
         emissions_pm10_non_broadcasting_mt = ifelse(is.na(emissions_pm10_non_broadcasting_mt), 0, emissions_co_non_broadcasting_mt)) %>%

  # Select columns to keep
  dplyr::select(year_month, 
         lon_bin,
         lat_bin,
         flag, 
         vessel_class, 
         length_size_class_percentile, 
         fishing_activity, 
         hours, 
         kw_hours,
         emissions_co2_mt, 
         emissions_ch4_mt, 
         emissions_n2o_mt, 
         emissions_nox_mt, 
         emissions_sox_mt, 
         emissions_pm_mt, 
         emissions_co_mt,
         emissions_vocs_mt,
         emissions_pm2_5_mt,
         emissions_pm10_mt,
         emissions_co2_non_broadcasting_mt,
         emissions_ch4_non_broadcasting_mt,
         emissions_n2o_non_broadcasting_mt,
         emissions_nox_non_broadcasting_mt,
         emissions_sox_non_broadcasting_mt,
         emissions_pm_non_broadcasting_mt,
         emissions_co_non_broadcasting_mt,
         emissions_vocs_non_broadcasting_mt,
         emissions_pm2_5_non_broadcasting_mt,
         emissions_pm10_non_broadcasting_mt
         )
```

**Decision point:** NA values in `emissions_non_broadcasting` are giving NA in the totals after factoring (`non_broadcasting` missing 2015 data, NA values on join).

-   Solution: replaced NA with 0
-   Filter for year >= 2016?

## Factor Emissions

```{r}
#| code-summary: Expand code

# Factor non-broadcasting emissions
emissions <- emissions_joined %>%
  
  # Calculate total kw hours per grouped "ship"
  group_by(year_month, lon_bin, lat_bin, flag, vessel_class, length_size_class_percentile, hours, kw_hours) %>% 
  mutate(kw_hours_by_ship = sum(kw_hours, na.rm = TRUE)) %>%
  
  # Calculate total `kw_hours` per pixel and length size class
  group_by(year_month, lon_bin, lat_bin, length_size_class_percentile) %>%
  mutate(total_kw_hours = sum(kw_hours, na.rm = TRUE)) %>%
  ungroup() %>%
  
  # Define a factor for the proportion of hours per flag/total hours 
  mutate(factor = kw_hours_by_ship/total_kw_hours) %>%
  
  # Apply factor to emissions columns to partition nb data
  mutate(total_co2 = emissions_co2_mt + (factor * emissions_co2_non_broadcasting_mt),
         total_ch4 = emissions_ch4_mt + (factor * emissions_ch4_non_broadcasting_mt),
         total_n2o = emissions_n2o_mt + (factor * emissions_n2o_non_broadcasting_mt),
         total_nox = emissions_nox_mt + (factor * emissions_nox_non_broadcasting_mt),
         total_sox = emissions_sox_mt + (factor * emissions_sox_non_broadcasting_mt),
         total_pm = emissions_pm_mt + (factor * emissions_pm_non_broadcasting_mt),
         total_co = emissions_co_mt + (factor * emissions_co_non_broadcasting_mt),
         total_vocs = emissions_vocs_mt + (factor * emissions_vocs_non_broadcasting_mt),
         total_pm2_5 =  emissions_pm2_5_mt + (factor * emissions_pm2_5_non_broadcasting_mt),
         total_pm10 = emissions_pm10_mt + (factor * emissions_pm10_non_broadcasting_mt)) %>%

  # Select columns of interest
  dplyr::select(year_month, 
         lon_bin,
         lat_bin,
         flag, 
         vessel_class, 
         length_size_class_percentile, 
         fishing_activity, 
         hours, 
         kw_hours,
         total_co2, 
         total_ch4, 
         total_n2o, 
         total_nox, 
         total_sox, 
         #total_pm, 
         total_co,
         total_vocs,
         total_pm2_5,
         total_pm10)
```

## Check for Discrepancies

```{r}
#| code-summary: Expand code

# List pollutants
pollutants <- c("co2", 
                "ch4",
                "n2o",
                "nox",
                "sox", 
                "pm", 
                "co",
                "vocs",
                "pm2_5",
                "pm10")

# Check for discrepancies
for (i in seq_along(pollutants)) {
  
  # Assign column names
  broad_col <- paste0("emissions_", pollutants[i], "_mt")
  non_broad_col <- paste0("emissions_", pollutants[i], "_non_broadcasting_mt")
  em_col <- paste0("total_", pollutants[i])
  
  # Total emissions before factoring
  em_before <- sum(broadcasting[[broad_col]], na.rm = TRUE) + sum(non_broadcasting[[non_broad_col]], na.rm = TRUE)
  
  # Total emissions after factoring
  em_after <- sum(emissions[[em_col]], na.rm = TRUE)
  
  # Difference in emissions
  diff <- em_after - em_before
  
  # Percent error
  error <- diff/em_before
  
  # Trigger error warning for lost emissions over 0.1%
  if (error > 0.001) {
  warning(paste0("Error over 0.1% returned for ", {pollutants[i]}, " emissions partitioning. Some emissions may be lost."))
  }
}
```

## Pivot Data for Visualizations

```{r}
#| code-summary: Expand code

# Pivot emissions data
em_pivot <- emissions %>%
  pivot_longer(10:19,
                names_to = "pollutant_type",
                values_to = "emissions") %>%
  mutate(pollutant_type = str_remove(pollutant_type, "total_"),
         year = as.numeric(substring(year_month, 1, 4)))
```

## Save Tables

```{r}
#| code-summary: Expand code

# Create "checkpoint" folder if needed
# Save combined dataset
#write_csv(emissions, here("checkpoint", "emissions.csv"))

emissions <- read_csv(here("checkpoint", "emissions.csv"))

# Saved pivot dataset
#write_csv(em_pivot, here("checkpoint", "em_pivot.csv"))

em_pivot <- read_csv(here("checkpoint", "em_pivot.csv"))
```

## Spatial Join FAO Regions and Emissions 

- Convert emissions to square pixels (st_make_grid) (Note: Lat, Long is lower left of pixel)
- Use Equal Earth or Mollweide for projection

```{r}
#| code-summary: Expand code

# Define emissions as sf object
# emissions_sf <- emissions %>%
#   st_as_sf(coords = c("lon_bin", "lat_bin"), crs = "54009") #4326 

# --- Prepare emissions and FAO data ----
emissions_sf <- emissions %>%
  # add lat and lon bin to preserve for merge 
  dplyr::mutate(lat = lat_bin, lon = lon_bin) %>%
  st_as_sf(coords = c("lon", "lat"), crs = "54009")  

# for sequoia
#fao_regions <- st_read(file.path("/home/emlab/projects/current-projects/ocean-ghg-fisheries/data/raw/world_fao_zones/world_fao_zones.shp"), crs = st_crs(emissions_sf)) #|> st_make_valid()

# for workbench
fao_regions <- st_read(file.path("/capstone/seamissions/data/fao_region_shapefile"), crs = st_crs(emissions_sf))
```

```{r}
# ---- Extract fao zone for emissions points ----

# Find which grid cell each point falls into
point_grid_intersections <- st_intersects(points, grid)

# Assign the grid cell ID to each point
points$grid_id <- sapply(point_grid_intersections, function(x) ifelse(length(x) > 0, x[1], NA))
```
1578367

```{r}

# subset sf for speed
subset_sf <- emissions_sf %>%
  filter(lat_bin %in% c(36:40)) %>%
  filter(lon_bin %in% c(-40:-45))

# ---- Step 1: Convert lat/long points to grid of polygons (1x1 degree cells) & make a key ----
emissions_grid <- subset_sf %>%
  # select lat & lon columns
  dplyr::select(lat_bin, lon_bin)

plot(st_geometry(emissions_grid))

#joined_grid <- st_join(emissions_grid, fao_regions, left = FALSE)
#unique(joined_grid$zone)

# check this step!
joined_grid <- st_join(emissions_grid, fao_regions, left = TRUE, join = st_intersection)
  
  # ---- Step 2: Find overlap between the grid cells and FAO zones using st_intersection ----
fao_intersections <- st_intersection(emissions_grid, fao_regions)
plot(fao_intersections)

# check it out
# Convert to sf to handle attributes and geometry together
fao_intersections <- st_as_sf(fao_intersections)

# Add area column to fao_intersections
joined_grid$area <- st_area(joined_gid)

# Now select the relevant columns (fao_zone, geometry, area)
fao_intersections <- fao_intersections %>%
  dplyr::select(fao_zone = zone, geometry, area)

# ---- Step 3: Join zones back to emissions ----
emissions_sf <- emissions_sf %>%
  st_join(fao_intersections) 
```

```{r}
emissions_sf <- emissions_sf %>%
  st_drop_geometry()
```


```{r}
# plot grid
plot(st_geometry(emissions_grid), main = "Emissions Grid")
```

## Side quest

```{r}
#| code-summary: Expand code
# Define emissions as sf object
emissions_sf_2 <- emissions %>%
  filter(lat_bin >= 0 & lat_bin <= 10) %>%
  filter(lon_bin >= 0 & lon_bin <= 10) %>%
  st_as_sf(coords = c("lon_bin", "lat_bin"), crs = "54009") # Change CRS later
  
# convert lat/long points to grid of polygons
emissions_grid_2 <- emissions_sf_2 %>%
  st_make_grid(cellsize = c(1,1),
               what = "polygons")

points_2 <- emissions %>%
  filter(lat_bin >= 0 & lat_bin <= 10) %>%
  filter(lon_bin >= 0 & lon_bin <= 10) %>%
  st_as_sf(coords = c("lon_bin", "lat_bin"), crs = "54009")


test <- emissions %>%
  filter(lat_bin == 8) %>%
  filter(lon_bin == 8)

# check it out
plot(st_geometry(emissions_grid_2), main = "Emissions Grid")
plot(st_geometry(points_2), add = TRUE)
```

#### Check CRS and projections 

- Check FAO and emissions grid, make sure they match and re-project if needed

```{r}

emissions_grid <- emissions_sf %>%
  st_make_grid(cellsize = c(1,1),
               what = "polygons")

st_crs(fao_regions) == st_crs(emissions_grid)

zone_31 <- fao_regions %>%
  filter(zone ==31)
#plot(zone_31)

#intersecting_points <- emissions_sf[st_intersects(emissions_sf, zone_31, sparse = FALSE), ]
zone_31_grid <- st_intersection(emissions_grid, zone_31, sparse = FALSE)

plot(zone_31_grid)

zone_31_grid$area <- st_area(zone_31_grid)

unique(zone_31_grid$area)
```


```{r}
# still mis-match?!
plot(zone_31, main = "FAO Zone 31", col = "gray90")
plot(zone_31_grid, add = TRUE)

st_crs(zone_31) == st_crs(zone_31_grid) #TRUE

```

# HERE

#### This is proof of concept for zone 31: 

- it takes forever to run
- haven't applied it to other zones
- resulting df saved to checkpoints

```{r}
#| code-summary: Expand code
# read in emissions data
emissions <- read_csv(here("checkpoint", "emissions.csv"))

# convert emissions to spatial object(?)
emissions_sf <- emissions %>%
  # add lat and lon bin to preserve for merge 
  dplyr::mutate(lat = lat_bin, lon = lon_bin) %>%
  st_as_sf(coords = c("lon", "lat"), crs = "54009") 

# read in fao regions (assign same CRS as emissions_sf)
fao_regions <- st_read(file.path("/capstone/seamissions/data/fao_region_shapefile"), crs = st_crs(emissions_sf))

# create grid throughout extent of emissions_sf
emissions_grid <- emissions_sf %>%
  st_make_grid(cellsize = c(1,1),
               what = "polygons")

# convert the grid to an sf object
emissions_grid_sf <- st_sf(geometry = emissions_grid)

# spatially join emissions data to the grid
emissions_grid_sf <- st_join(emissions_grid_sf, emissions_sf, left = FALSE)

# If a grid cell has no emissions data, it will be removed when left = FALSE.
# If you want all grid cells, even empty ones, use left = TRUE.


# ---------- zone 31 test ------------
# filter for zone 31 for speed
zone_31 <- fao_regions %>%
  filter(zone == 31)

# confirm crs match
st_crs(emissions_grid_sf) == st_crs(zone_31)

# cut out grid cells that overlap with zone 31
emissions_zone_31 <- st_intersection(emissions_grid_sf, zone_31, sparse = FALSE)

# add area column
emissions_zone_31$area <- st_area(emissions_zone_31)

# look at area breakdown to see if makes sense (mostly 1s)
areas <- emissions_zone_31 %>%
  group_by(area) %>%
  summarise(count = n()) %>%
  arrange(desc(count))

# calculate total co2 for zone 31
test <- emissions_zone_31 %>%
  group_by(lat_bin, lon_bin) %>%
  summarize(co2 = sum(total_co2))

# visualize total co2 for zone 31
ggplot(test) +
  geom_sf(aes(fill = co2)) +
  theme_minimal()

# prep to merge with fao data
prep_emissions_zone_31 <- emissions_zone_31 %>%
  group_by(zone, year_month, flag) %>%
  summarise(countries = n())

# -------- CHECKPOINT --------
#st_write(emissions_zone_31, here("checkpoint", "emissions_zone_31.gpkg"))
```

#### Merge with FAO catch data

```{r}
#| code-summary: Load Project Data
# ---- FAO seafood production data ---
fao_capture_quantity <- read_csv(here::here("/capstone/seamissions/data/fao_seafood_production/Capture_Quantity.csv"), show_col_types = FALSE) |> clean_names()

fao_country_groups <- read_csv(here::here("/capstone/seamissions/data/fao_seafood_production/CL_FI_COUNTRY_GROUPS.csv"), show_col_types = FALSE)|> clean_names()

fao_species_groups <- read_csv(here::here("/capstone/seamissions/data/fao_seafood_production/CL_FI_SPECIES_GROUPS.csv"), show_col_types = FALSE)|> clean_names()

fao_symbol <- read_csv(here::here("/capstone/seamissions/data/fao_seafood_production/CL_FI_SYMBOL_SDMX.csv"), show_col_types = FALSE) |> clean_names()
fao_waterarea <- read_csv(here::here("/capstone/seamissions/data/fao_seafood_production/CL_FI_WATERAREA_GROUPS.csv"), show_col_types = FALSE)|> clean_names()

```

```{r}
#| code-summary: Assemble FAO data
# --- Clean Data ----
fao_country_groups_clean <- fao_country_groups |>
  select(un_code, iso3_code, name_en, continent_group_en, official_name_en)

fao_species_groups_clean <- fao_species_groups |>
  select(x3a_code, taxonomic_code, identifier, scientific_name, contains("_en"))

fao_waterarea_clean <- fao_waterarea |>
  select(code, contains("_en"))

# ---- Left join capture and country groups ----
fao_capture_join <- left_join(fao_capture_quantity, fao_country_groups_clean, by = join_by(country_un_code == un_code)) 

fao_capture_join <- left_join(fao_capture_join, fao_species_groups_clean, by = join_by(iso3_code == x3a_code))

fao_capture_join <- left_join(fao_capture_join, fao_waterarea_clean, by = join_by(area_code == code))
```

# Attempt to merge emissions with FAO catch data for zone 31 

*make sure flags match in FAO and GFW datasets*

```{r}
#| code-summary: Merge emissions and FAO catch data
# filter FAO catch data for zone 31
fao_catch_31 <- fao_capture_join %>%
  filter(area_code == "31") %>%
  # only keep a few columns for speed
  select(area_code,
         period,
         iso3_code,
    official_name_en,
    scientific_name,
    value
  ) %>%
  # reaname for easy join
  rename(zone = area_code,
         year = period,
         flag = iso3_code,
         count = value) %>%
  # make sure these are integers
  mutate(zone = as.integer(zone),
         year = as.integer(year))

# replace year_month with year
emissions_zone_31 <- emissions_zone_31 %>%
  mutate(year = as.integer(substr(year_month, 1, 4))) %>%
  select(-year_month)

# join by zone, year, and flag
catch_emissions_zone_31 <- left_join(emissions_zone_31, fao_catch_31, by = c("zone", "year", "flag"), relationship = "many-to-many")

# drop geometry
catch_emissions_zone_31_no_geo <- catch_emissions_zone_31 %>%
  st_drop_geometry()

# ------- CHECKPOINT --------
#st_write(catch_emissions_zone_31, here("checkpoint", "catch_emissions_zone_31.gpkg"))
#write_csv(catch_emissions_zone_31_no_geo, here("checkpoint", "catch_emissions_zone_31_no_geo.csv"))
```

#### Explore

```{r}
unique(fao_zone_31_merged_no_geo$scientific_name)


sample <- fao_zone_31_merged_no_geo %>%
  filter(scientific_name == "Panulirus spp") # spiny lobster

sample_viz <- sample %>%
  group_by(year, flag) %>%
  summarise(sum_co2 = sum(total_co2),
            sum_counts = sum(count)) %>%
  mutate(cost = sum_co2/sum_counts)

sample_2 <- fao_zone_31_merged_no_geo %>%
  filter(scientific_name == "Setipinna phasa") # 

sample_2_viz <- sample_2 %>%
  group_by(year, flag) %>%
  summarise(sum_co2 = sum(total_co2),
            sum_counts = sum(count)) %>%
  mutate(cost = sum_co2/sum_counts)

top <- fao_zone_31_merged_no_geo %>%
  group_by(flag, scientific_name) %>%
  summarise(counts = n()) %>%
  #filter(scientific_name == "Austrolabrus maculatus") %>%
  arrange(desc(counts))

sample_3 <- fao_zone_31_merged_no_geo %>%
  filter(scientific_name == "Austrolabrus maculatus") # black spotted parrotfish?

sample_3_viz <- sample_3 %>%
  group_by(year, flag) %>%
  summarise(sum_co2 = sum(total_co2),
            sum_counts = sum(count)) %>%
  mutate(cost = sum_co2/sum_counts)  


unique(fao_zone_31_merged_no_geo$flag)
```




- Assign FAO regions to emissions 
- Assign majority pixel to region as a test then, assign by proportion
